// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SkyAPM/go2sky/reporter/grpc/management (interfaces: ManagementServiceClient)

// Package mock_management is a generated GoMock package.
package mock_management

import (
	context "context"
	common "github.com/SkyAPM/go2sky/reporter/grpc/common"
	management "github.com/SkyAPM/go2sky/reporter/grpc/management"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockManagementServiceClient is a mock of ManagementServiceClient interface
type MockManagementServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementServiceClientMockRecorder
}

// MockManagementServiceClientMockRecorder is the mock recorder for MockManagementServiceClient
type MockManagementServiceClientMockRecorder struct {
	mock *MockManagementServiceClient
}

// NewMockManagementServiceClient creates a new mock instance
func NewMockManagementServiceClient(ctrl *gomock.Controller) *MockManagementServiceClient {
	mock := &MockManagementServiceClient{ctrl: ctrl}
	mock.recorder = &MockManagementServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagementServiceClient) EXPECT() *MockManagementServiceClientMockRecorder {
	return m.recorder
}

// KeepAlive mocks base method
func (m *MockManagementServiceClient) KeepAlive(arg0 context.Context, arg1 *management.InstancePingPkg, arg2 ...grpc.CallOption) (*common.Commands, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KeepAlive", varargs...)
	ret0, _ := ret[0].(*common.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeepAlive indicates an expected call of KeepAlive
func (mr *MockManagementServiceClientMockRecorder) KeepAlive(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeepAlive", reflect.TypeOf((*MockManagementServiceClient)(nil).KeepAlive), varargs...)
}

// ReportInstanceProperties mocks base method
func (m *MockManagementServiceClient) ReportInstanceProperties(arg0 context.Context, arg1 *management.InstanceProperties, arg2 ...grpc.CallOption) (*common.Commands, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportInstanceProperties", varargs...)
	ret0, _ := ret[0].(*common.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportInstanceProperties indicates an expected call of ReportInstanceProperties
func (mr *MockManagementServiceClientMockRecorder) ReportInstanceProperties(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportInstanceProperties", reflect.TypeOf((*MockManagementServiceClient)(nil).ReportInstanceProperties), varargs...)
}
