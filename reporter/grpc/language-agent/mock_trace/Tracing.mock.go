// Code generated by MockGen. DO NOT EDIT.
// Source: skywalking.apache.org/repo/goapi/collect/language/agent/v3 (interfaces: TraceSegmentReportServiceClient)

// Package mock_v3 is a generated GoMock package.
package mock_v3

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	v3 "skywalking.apache.org/repo/goapi/collect/common/v3"
	v30 "skywalking.apache.org/repo/goapi/collect/language/agent/v3"
)

// MockTraceSegmentReportServiceClient is a mock of TraceSegmentReportServiceClient interface.
type MockTraceSegmentReportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTraceSegmentReportServiceClientMockRecorder
}

// MockTraceSegmentReportServiceClientMockRecorder is the mock recorder for MockTraceSegmentReportServiceClient.
type MockTraceSegmentReportServiceClientMockRecorder struct {
	mock *MockTraceSegmentReportServiceClient
}

// NewMockTraceSegmentReportServiceClient creates a new mock instance.
func NewMockTraceSegmentReportServiceClient(ctrl *gomock.Controller) *MockTraceSegmentReportServiceClient {
	mock := &MockTraceSegmentReportServiceClient{ctrl: ctrl}
	mock.recorder = &MockTraceSegmentReportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceSegmentReportServiceClient) EXPECT() *MockTraceSegmentReportServiceClientMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockTraceSegmentReportServiceClient) Collect(arg0 context.Context, arg1 ...grpc.CallOption) (v30.TraceSegmentReportService_CollectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(v30.TraceSegmentReportService_CollectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockTraceSegmentReportServiceClientMockRecorder) Collect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockTraceSegmentReportServiceClient)(nil).Collect), varargs...)
}

// CollectInSync mocks base method.
func (m *MockTraceSegmentReportServiceClient) CollectInSync(arg0 context.Context, arg1 *v30.SegmentCollection, arg2 ...grpc.CallOption) (*v3.Commands, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectInSync", varargs...)
	ret0, _ := ret[0].(*v3.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectInSync indicates an expected call of CollectInSync.
func (mr *MockTraceSegmentReportServiceClientMockRecorder) CollectInSync(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectInSync", reflect.TypeOf((*MockTraceSegmentReportServiceClient)(nil).CollectInSync), varargs...)
}
