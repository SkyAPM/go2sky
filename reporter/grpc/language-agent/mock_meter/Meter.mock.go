// Code generated by MockGen. DO NOT EDIT.
// Source: skywalking.apache.org/repo/goapi/collect/language/agent/v3 (interfaces: MeterReportServiceClient,MeterReportService_CollectBatchClient)

// Package mock_v3 is a generated GoMock package.
package mock_v3

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	v3 "skywalking.apache.org/repo/goapi/collect/common/v3"
	v30 "skywalking.apache.org/repo/goapi/collect/language/agent/v3"
)

// MockMeterReportServiceClient is a mock of MeterReportServiceClient interface.
type MockMeterReportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportServiceClientMockRecorder
}

// MockMeterReportServiceClientMockRecorder is the mock recorder for MockMeterReportServiceClient.
type MockMeterReportServiceClientMockRecorder struct {
	mock *MockMeterReportServiceClient
}

// NewMockMeterReportServiceClient creates a new mock instance.
func NewMockMeterReportServiceClient(ctrl *gomock.Controller) *MockMeterReportServiceClient {
	mock := &MockMeterReportServiceClient{ctrl: ctrl}
	mock.recorder = &MockMeterReportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportServiceClient) EXPECT() *MockMeterReportServiceClientMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMeterReportServiceClient) Collect(arg0 context.Context, arg1 ...grpc.CallOption) (v30.MeterReportService_CollectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(v30.MeterReportService_CollectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockMeterReportServiceClientMockRecorder) Collect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMeterReportServiceClient)(nil).Collect), varargs...)
}

// CollectBatch mocks base method.
func (m *MockMeterReportServiceClient) CollectBatch(arg0 context.Context, arg1 ...grpc.CallOption) (v30.MeterReportService_CollectBatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectBatch", varargs...)
	ret0, _ := ret[0].(v30.MeterReportService_CollectBatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectBatch indicates an expected call of CollectBatch.
func (mr *MockMeterReportServiceClientMockRecorder) CollectBatch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectBatch", reflect.TypeOf((*MockMeterReportServiceClient)(nil).CollectBatch), varargs...)
}

// MockMeterReportService_CollectBatchClient is a mock of MeterReportService_CollectBatchClient interface.
type MockMeterReportService_CollectBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportService_CollectBatchClientMockRecorder
}

// MockMeterReportService_CollectBatchClientMockRecorder is the mock recorder for MockMeterReportService_CollectBatchClient.
type MockMeterReportService_CollectBatchClientMockRecorder struct {
	mock *MockMeterReportService_CollectBatchClient
}

// NewMockMeterReportService_CollectBatchClient creates a new mock instance.
func NewMockMeterReportService_CollectBatchClient(ctrl *gomock.Controller) *MockMeterReportService_CollectBatchClient {
	mock := &MockMeterReportService_CollectBatchClient{ctrl: ctrl}
	mock.recorder = &MockMeterReportService_CollectBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportService_CollectBatchClient) EXPECT() *MockMeterReportService_CollectBatchClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockMeterReportService_CollectBatchClient) CloseAndRecv() (*v3.Commands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v3.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockMeterReportService_CollectBatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m *MockMeterReportService_CollectBatchClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Send(arg0 *v30.MeterDataCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockMeterReportService_CollectBatchClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Trailer))
}
