// Code generated by MockGen. DO NOT EDIT.
// Source: v3/Meter_grpc.pb.go

// Package mock_v3 is a generated GoMock package.
package mock_meter

import (
	context "context"
	reflect "reflect"

	v3 "github.com/SkyAPM/go2sky/v3"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	v30 "skywalking.apache.org/repo/goapi/collect/common/v3"
)

// MockMeterReportServiceClient is a mock of MeterReportServiceClient interface.
type MockMeterReportServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportServiceClientMockRecorder
}

// MockMeterReportServiceClientMockRecorder is the mock recorder for MockMeterReportServiceClient.
type MockMeterReportServiceClientMockRecorder struct {
	mock *MockMeterReportServiceClient
}

// NewMockMeterReportServiceClient creates a new mock instance.
func NewMockMeterReportServiceClient(ctrl *gomock.Controller) *MockMeterReportServiceClient {
	mock := &MockMeterReportServiceClient{ctrl: ctrl}
	mock.recorder = &MockMeterReportServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportServiceClient) EXPECT() *MockMeterReportServiceClientMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMeterReportServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (v3.MeterReportService_CollectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collect", varargs...)
	ret0, _ := ret[0].(v3.MeterReportService_CollectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Collect indicates an expected call of Collect.
func (mr *MockMeterReportServiceClientMockRecorder) Collect(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMeterReportServiceClient)(nil).Collect), varargs...)
}

// CollectBatch mocks base method.
func (m *MockMeterReportServiceClient) CollectBatch(ctx context.Context, opts ...grpc.CallOption) (v3.MeterReportService_CollectBatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CollectBatch", varargs...)
	ret0, _ := ret[0].(v3.MeterReportService_CollectBatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectBatch indicates an expected call of CollectBatch.
func (mr *MockMeterReportServiceClientMockRecorder) CollectBatch(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectBatch", reflect.TypeOf((*MockMeterReportServiceClient)(nil).CollectBatch), varargs...)
}

// MockMeterReportService_CollectClient is a mock of MeterReportService_CollectClient interface.
type MockMeterReportService_CollectClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportService_CollectClientMockRecorder
}

// MockMeterReportService_CollectClientMockRecorder is the mock recorder for MockMeterReportService_CollectClient.
type MockMeterReportService_CollectClientMockRecorder struct {
	mock *MockMeterReportService_CollectClient
}

// NewMockMeterReportService_CollectClient creates a new mock instance.
func NewMockMeterReportService_CollectClient(ctrl *gomock.Controller) *MockMeterReportService_CollectClient {
	mock := &MockMeterReportService_CollectClient{ctrl: ctrl}
	mock.recorder = &MockMeterReportService_CollectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportService_CollectClient) EXPECT() *MockMeterReportService_CollectClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockMeterReportService_CollectClient) CloseAndRecv() (*v30.Commands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v30.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockMeterReportService_CollectClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockMeterReportService_CollectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeterReportService_CollectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeterReportService_CollectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeterReportService_CollectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeterReportService_CollectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeterReportService_CollectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockMeterReportService_CollectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeterReportService_CollectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMeterReportService_CollectClient) Send(arg0 *v3.MeterData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeterReportService_CollectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeterReportService_CollectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeterReportService_CollectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMeterReportService_CollectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeterReportService_CollectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeterReportService_CollectClient)(nil).Trailer))
}

// MockMeterReportService_CollectBatchClient is a mock of MeterReportService_CollectBatchClient interface.
type MockMeterReportService_CollectBatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportService_CollectBatchClientMockRecorder
}

// MockMeterReportService_CollectBatchClientMockRecorder is the mock recorder for MockMeterReportService_CollectBatchClient.
type MockMeterReportService_CollectBatchClientMockRecorder struct {
	mock *MockMeterReportService_CollectBatchClient
}

// NewMockMeterReportService_CollectBatchClient creates a new mock instance.
func NewMockMeterReportService_CollectBatchClient(ctrl *gomock.Controller) *MockMeterReportService_CollectBatchClient {
	mock := &MockMeterReportService_CollectBatchClient{ctrl: ctrl}
	mock.recorder = &MockMeterReportService_CollectBatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportService_CollectBatchClient) EXPECT() *MockMeterReportService_CollectBatchClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockMeterReportService_CollectBatchClient) CloseAndRecv() (*v30.Commands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*v30.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockMeterReportService_CollectBatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockMeterReportService_CollectBatchClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Send(arg0 *v3.MeterDataCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeterReportService_CollectBatchClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMeterReportService_CollectBatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMeterReportService_CollectBatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMeterReportService_CollectBatchClient)(nil).Trailer))
}

// MockMeterReportServiceServer is a mock of MeterReportServiceServer interface.
type MockMeterReportServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportServiceServerMockRecorder
}

// MockMeterReportServiceServerMockRecorder is the mock recorder for MockMeterReportServiceServer.
type MockMeterReportServiceServerMockRecorder struct {
	mock *MockMeterReportServiceServer
}

// NewMockMeterReportServiceServer creates a new mock instance.
func NewMockMeterReportServiceServer(ctrl *gomock.Controller) *MockMeterReportServiceServer {
	mock := &MockMeterReportServiceServer{ctrl: ctrl}
	mock.recorder = &MockMeterReportServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportServiceServer) EXPECT() *MockMeterReportServiceServerMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMeterReportServiceServer) Collect(arg0 v3.MeterReportService_CollectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect.
func (mr *MockMeterReportServiceServerMockRecorder) Collect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMeterReportServiceServer)(nil).Collect), arg0)
}

// CollectBatch mocks base method.
func (m *MockMeterReportServiceServer) CollectBatch(arg0 v3.MeterReportService_CollectBatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectBatch indicates an expected call of CollectBatch.
func (mr *MockMeterReportServiceServerMockRecorder) CollectBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectBatch", reflect.TypeOf((*MockMeterReportServiceServer)(nil).CollectBatch), arg0)
}

// mustEmbedUnimplementedMeterReportServiceServer mocks base method.
func (m *MockMeterReportServiceServer) mustEmbedUnimplementedMeterReportServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMeterReportServiceServer")
}

// mustEmbedUnimplementedMeterReportServiceServer indicates an expected call of mustEmbedUnimplementedMeterReportServiceServer.
func (mr *MockMeterReportServiceServerMockRecorder) mustEmbedUnimplementedMeterReportServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMeterReportServiceServer", reflect.TypeOf((*MockMeterReportServiceServer)(nil).mustEmbedUnimplementedMeterReportServiceServer))
}

// MockUnsafeMeterReportServiceServer is a mock of UnsafeMeterReportServiceServer interface.
type MockUnsafeMeterReportServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMeterReportServiceServerMockRecorder
}

// MockUnsafeMeterReportServiceServerMockRecorder is the mock recorder for MockUnsafeMeterReportServiceServer.
type MockUnsafeMeterReportServiceServerMockRecorder struct {
	mock *MockUnsafeMeterReportServiceServer
}

// NewMockUnsafeMeterReportServiceServer creates a new mock instance.
func NewMockUnsafeMeterReportServiceServer(ctrl *gomock.Controller) *MockUnsafeMeterReportServiceServer {
	mock := &MockUnsafeMeterReportServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMeterReportServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMeterReportServiceServer) EXPECT() *MockUnsafeMeterReportServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMeterReportServiceServer mocks base method.
func (m *MockUnsafeMeterReportServiceServer) mustEmbedUnimplementedMeterReportServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMeterReportServiceServer")
}

// mustEmbedUnimplementedMeterReportServiceServer indicates an expected call of mustEmbedUnimplementedMeterReportServiceServer.
func (mr *MockUnsafeMeterReportServiceServerMockRecorder) mustEmbedUnimplementedMeterReportServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMeterReportServiceServer", reflect.TypeOf((*MockUnsafeMeterReportServiceServer)(nil).mustEmbedUnimplementedMeterReportServiceServer))
}

// MockMeterReportService_CollectServer is a mock of MeterReportService_CollectServer interface.
type MockMeterReportService_CollectServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportService_CollectServerMockRecorder
}

// MockMeterReportService_CollectServerMockRecorder is the mock recorder for MockMeterReportService_CollectServer.
type MockMeterReportService_CollectServerMockRecorder struct {
	mock *MockMeterReportService_CollectServer
}

// NewMockMeterReportService_CollectServer creates a new mock instance.
func NewMockMeterReportService_CollectServer(ctrl *gomock.Controller) *MockMeterReportService_CollectServer {
	mock := &MockMeterReportService_CollectServer{ctrl: ctrl}
	mock.recorder = &MockMeterReportService_CollectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportService_CollectServer) EXPECT() *MockMeterReportService_CollectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMeterReportService_CollectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeterReportService_CollectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockMeterReportService_CollectServer) Recv() (*v3.MeterData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v3.MeterData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMeterReportService_CollectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMeterReportService_CollectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeterReportService_CollectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockMeterReportService_CollectServer) SendAndClose(arg0 *v30.Commands) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockMeterReportService_CollectServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockMeterReportService_CollectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMeterReportService_CollectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeterReportService_CollectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeterReportService_CollectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMeterReportService_CollectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMeterReportService_CollectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMeterReportService_CollectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMeterReportService_CollectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMeterReportService_CollectServer)(nil).SetTrailer), arg0)
}

// MockMeterReportService_CollectBatchServer is a mock of MeterReportService_CollectBatchServer interface.
type MockMeterReportService_CollectBatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockMeterReportService_CollectBatchServerMockRecorder
}

// MockMeterReportService_CollectBatchServerMockRecorder is the mock recorder for MockMeterReportService_CollectBatchServer.
type MockMeterReportService_CollectBatchServerMockRecorder struct {
	mock *MockMeterReportService_CollectBatchServer
}

// NewMockMeterReportService_CollectBatchServer creates a new mock instance.
func NewMockMeterReportService_CollectBatchServer(ctrl *gomock.Controller) *MockMeterReportService_CollectBatchServer {
	mock := &MockMeterReportService_CollectBatchServer{ctrl: ctrl}
	mock.recorder = &MockMeterReportService_CollectBatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterReportService_CollectBatchServer) EXPECT() *MockMeterReportService_CollectBatchServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMeterReportService_CollectBatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockMeterReportService_CollectBatchServer) Recv() (*v3.MeterDataCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*v3.MeterDataCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMeterReportService_CollectBatchServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockMeterReportService_CollectBatchServer) SendAndClose(arg0 *v30.Commands) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockMeterReportService_CollectBatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMeterReportService_CollectBatchServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMeterReportService_CollectBatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMeterReportService_CollectBatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMeterReportService_CollectBatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMeterReportService_CollectBatchServer)(nil).SetTrailer), arg0)
}
