// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/JVM.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PoolType int32

const (
	PoolType_CODE_CACHE_USAGE PoolType = 0
	PoolType_NEWGEN_USAGE     PoolType = 1
	PoolType_OLDGEN_USAGE     PoolType = 2
	PoolType_SURVIVOR_USAGE   PoolType = 3
	PoolType_PERMGEN_USAGE    PoolType = 4
	PoolType_METASPACE_USAGE  PoolType = 5
)

var PoolType_name = map[int32]string{
	0: "CODE_CACHE_USAGE",
	1: "NEWGEN_USAGE",
	2: "OLDGEN_USAGE",
	3: "SURVIVOR_USAGE",
	4: "PERMGEN_USAGE",
	5: "METASPACE_USAGE",
}

var PoolType_value = map[string]int32{
	"CODE_CACHE_USAGE": 0,
	"NEWGEN_USAGE":     1,
	"OLDGEN_USAGE":     2,
	"SURVIVOR_USAGE":   3,
	"PERMGEN_USAGE":    4,
	"METASPACE_USAGE":  5,
}

func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}

func (PoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{0}
}

type GCPhrase int32

const (
	GCPhrase_NEW GCPhrase = 0
	GCPhrase_OLD GCPhrase = 1
)

var GCPhrase_name = map[int32]string{
	0: "NEW",
	1: "OLD",
}

var GCPhrase_value = map[string]int32{
	"NEW": 0,
	"OLD": 1,
}

func (x GCPhrase) String() string {
	return proto.EnumName(GCPhrase_name, int32(x))
}

func (GCPhrase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{1}
}

type JVMMetric struct {
	Time                 int64         `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Cpu                  *CPU          `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory               []*Memory     `protobuf:"bytes,3,rep,name=memory,proto3" json:"memory,omitempty"`
	MemoryPool           []*MemoryPool `protobuf:"bytes,4,rep,name=memoryPool,proto3" json:"memoryPool,omitempty"`
	Gc                   []*GC         `protobuf:"bytes,5,rep,name=gc,proto3" json:"gc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *JVMMetric) Reset()         { *m = JVMMetric{} }
func (m *JVMMetric) String() string { return proto.CompactTextString(m) }
func (*JVMMetric) ProtoMessage()    {}
func (*JVMMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{0}
}

func (m *JVMMetric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JVMMetric.Unmarshal(m, b)
}
func (m *JVMMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JVMMetric.Marshal(b, m, deterministic)
}
func (m *JVMMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JVMMetric.Merge(m, src)
}
func (m *JVMMetric) XXX_Size() int {
	return xxx_messageInfo_JVMMetric.Size(m)
}
func (m *JVMMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_JVMMetric.DiscardUnknown(m)
}

var xxx_messageInfo_JVMMetric proto.InternalMessageInfo

func (m *JVMMetric) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *JVMMetric) GetCpu() *CPU {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *JVMMetric) GetMemory() []*Memory {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *JVMMetric) GetMemoryPool() []*MemoryPool {
	if m != nil {
		return m.MemoryPool
	}
	return nil
}

func (m *JVMMetric) GetGc() []*GC {
	if m != nil {
		return m.Gc
	}
	return nil
}

type Memory struct {
	IsHeap               bool     `protobuf:"varint,1,opt,name=isHeap,proto3" json:"isHeap,omitempty"`
	Init                 int64    `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Max                  int64    `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Used                 int64    `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	Committed            int64    `protobuf:"varint,5,opt,name=committed,proto3" json:"committed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Memory) Reset()         { *m = Memory{} }
func (m *Memory) String() string { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()    {}
func (*Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{1}
}

func (m *Memory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memory.Unmarshal(m, b)
}
func (m *Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memory.Marshal(b, m, deterministic)
}
func (m *Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memory.Merge(m, src)
}
func (m *Memory) XXX_Size() int {
	return xxx_messageInfo_Memory.Size(m)
}
func (m *Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_Memory proto.InternalMessageInfo

func (m *Memory) GetIsHeap() bool {
	if m != nil {
		return m.IsHeap
	}
	return false
}

func (m *Memory) GetInit() int64 {
	if m != nil {
		return m.Init
	}
	return 0
}

func (m *Memory) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Memory) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Memory) GetCommitted() int64 {
	if m != nil {
		return m.Committed
	}
	return 0
}

type MemoryPool struct {
	Type                 PoolType `protobuf:"varint,1,opt,name=type,proto3,enum=PoolType" json:"type,omitempty"`
	Init                 int64    `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Max                  int64    `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	Used                 int64    `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	Commited             int64    `protobuf:"varint,5,opt,name=commited,proto3" json:"commited,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryPool) Reset()         { *m = MemoryPool{} }
func (m *MemoryPool) String() string { return proto.CompactTextString(m) }
func (*MemoryPool) ProtoMessage()    {}
func (*MemoryPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{2}
}

func (m *MemoryPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryPool.Unmarshal(m, b)
}
func (m *MemoryPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryPool.Marshal(b, m, deterministic)
}
func (m *MemoryPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryPool.Merge(m, src)
}
func (m *MemoryPool) XXX_Size() int {
	return xxx_messageInfo_MemoryPool.Size(m)
}
func (m *MemoryPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryPool.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryPool proto.InternalMessageInfo

func (m *MemoryPool) GetType() PoolType {
	if m != nil {
		return m.Type
	}
	return PoolType_CODE_CACHE_USAGE
}

func (m *MemoryPool) GetInit() int64 {
	if m != nil {
		return m.Init
	}
	return 0
}

func (m *MemoryPool) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MemoryPool) GetUsed() int64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *MemoryPool) GetCommited() int64 {
	if m != nil {
		return m.Commited
	}
	return 0
}

type GC struct {
	Phrase               GCPhrase `protobuf:"varint,1,opt,name=phrase,proto3,enum=GCPhrase" json:"phrase,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Time                 int64    `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GC) Reset()         { *m = GC{} }
func (m *GC) String() string { return proto.CompactTextString(m) }
func (*GC) ProtoMessage()    {}
func (*GC) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f5f61b58cf3158, []int{3}
}

func (m *GC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GC.Unmarshal(m, b)
}
func (m *GC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GC.Marshal(b, m, deterministic)
}
func (m *GC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GC.Merge(m, src)
}
func (m *GC) XXX_Size() int {
	return xxx_messageInfo_GC.Size(m)
}
func (m *GC) XXX_DiscardUnknown() {
	xxx_messageInfo_GC.DiscardUnknown(m)
}

var xxx_messageInfo_GC proto.InternalMessageInfo

func (m *GC) GetPhrase() GCPhrase {
	if m != nil {
		return m.Phrase
	}
	return GCPhrase_NEW
}

func (m *GC) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GC) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterEnum("PoolType", PoolType_name, PoolType_value)
	proto.RegisterEnum("GCPhrase", GCPhrase_name, GCPhrase_value)
	proto.RegisterType((*JVMMetric)(nil), "JVMMetric")
	proto.RegisterType((*Memory)(nil), "Memory")
	proto.RegisterType((*MemoryPool)(nil), "MemoryPool")
	proto.RegisterType((*GC)(nil), "GC")
}

func init() { proto.RegisterFile("common/JVM.proto", fileDescriptor_42f5f61b58cf3158) }

var fileDescriptor_42f5f61b58cf3158 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xd1, 0x6e, 0xda, 0x3e,
	0x14, 0xc6, 0x9b, 0x38, 0x50, 0x7a, 0xf8, 0xff, 0xbb, 0xcc, 0x54, 0x55, 0x84, 0x3a, 0x8d, 0x71,
	0x85, 0x3a, 0xcd, 0x4c, 0xec, 0x09, 0x58, 0x88, 0xe8, 0xaa, 0x06, 0x32, 0x53, 0x40, 0xda, 0x4d,
	0x95, 0xa6, 0x56, 0x88, 0x42, 0xe2, 0x28, 0x18, 0xb5, 0xb9, 0xeb, 0x5e, 0x63, 0x8f, 0xb0, 0xa7,
	0x9c, 0xec, 0x04, 0xb2, 0xfb, 0x5d, 0xf1, 0x9d, 0xdf, 0xf9, 0x74, 0xce, 0x87, 0x1d, 0x83, 0x19,
	0xf0, 0x24, 0xe1, 0xe9, 0xf0, 0x76, 0xe5, 0x92, 0x2c, 0xe7, 0x82, 0x77, 0x3b, 0x15, 0x29, 0x7f,
	0x4a, 0xd8, 0xff, 0xa5, 0xc1, 0xd9, 0xed, 0xca, 0x75, 0x99, 0xc8, 0xa3, 0x00, 0x63, 0x30, 0x44,
	0x94, 0x30, 0x4b, 0xeb, 0x69, 0x03, 0x44, 0x95, 0xc6, 0x97, 0x80, 0x82, 0x6c, 0x6f, 0xe9, 0x3d,
	0x6d, 0xd0, 0x1e, 0x19, 0xc4, 0xf6, 0x96, 0x54, 0x02, 0xfc, 0x1e, 0x9a, 0x09, 0x4b, 0x78, 0x5e,
	0x58, 0xa8, 0x87, 0x06, 0xed, 0xd1, 0x29, 0x71, 0x55, 0x49, 0x2b, 0x8c, 0x3f, 0x02, 0x94, 0xca,
	0xe3, 0x7c, 0x6b, 0x19, 0xca, 0xd4, 0xae, 0x4c, 0x12, 0xd1, 0xbf, 0xda, 0xb8, 0x03, 0x7a, 0x18,
	0x58, 0x0d, 0x65, 0x42, 0x64, 0x6a, 0x53, 0x3d, 0x0c, 0xfa, 0x2f, 0xd0, 0x2c, 0xed, 0xf8, 0x12,
	0x9a, 0xd1, 0xee, 0x86, 0xf9, 0x99, 0x8a, 0xd6, 0xa2, 0x55, 0x25, 0x03, 0x47, 0x69, 0x24, 0x54,
	0x3a, 0x44, 0x95, 0xc6, 0x26, 0xa0, 0xc4, 0x7f, 0xb1, 0x90, 0x42, 0x52, 0x4a, 0xd7, 0x7e, 0xc7,
	0x9e, 0x2c, 0xa3, 0x74, 0x49, 0x8d, 0xaf, 0xe0, 0x4c, 0x1e, 0x44, 0x24, 0x04, 0x7b, 0xb2, 0x1a,
	0xaa, 0x51, 0x83, 0xfe, 0x4f, 0x0d, 0xa0, 0x4e, 0x8a, 0xdf, 0x81, 0x21, 0x8a, 0xac, 0x3c, 0x97,
	0xf3, 0xd1, 0x19, 0x91, 0xf0, 0xbe, 0xc8, 0x18, 0x55, 0xf8, 0x1f, 0x52, 0x74, 0xa1, 0x55, 0x2e,
	0x3d, 0x86, 0x38, 0xd6, 0xfd, 0xef, 0xa0, 0x4f, 0x6d, 0xfc, 0x01, 0x9a, 0xd9, 0x26, 0xf7, 0x77,
	0xf5, 0xf2, 0xa9, 0xed, 0x29, 0x40, 0xab, 0x06, 0xbe, 0x80, 0x46, 0xc0, 0xf7, 0xe9, 0x61, 0x7f,
	0x59, 0x1c, 0xef, 0x12, 0xd5, 0x77, 0x79, 0xfd, 0xaa, 0x41, 0xeb, 0x90, 0x1d, 0x5f, 0x80, 0x69,
	0xcf, 0x27, 0xce, 0x83, 0x3d, 0xb6, 0x6f, 0x9c, 0x87, 0xe5, 0x62, 0x3c, 0x75, 0xcc, 0x13, 0x6c,
	0xc2, 0x7f, 0x33, 0x67, 0x3d, 0x75, 0x66, 0x15, 0xd1, 0x24, 0x99, 0xdf, 0x4d, 0x6a, 0xa2, 0x63,
	0x0c, 0xe7, 0x8b, 0x25, 0x5d, 0x7d, 0x5b, 0xcd, 0x69, 0xc5, 0x10, 0x7e, 0x0b, 0xff, 0x7b, 0x0e,
	0x75, 0x6b, 0x9b, 0x81, 0x3b, 0xf0, 0xc6, 0x75, 0xee, 0xc7, 0x0b, 0x6f, 0x6c, 0x1f, 0xe6, 0x37,
	0xae, 0xaf, 0xa0, 0x75, 0xf8, 0x03, 0xf8, 0x14, 0xd0, 0xcc, 0x59, 0x9b, 0x27, 0x52, 0xcc, 0xef,
	0x26, 0xa6, 0xf6, 0xf5, 0x55, 0x83, 0xcf, 0x3c, 0x0f, 0x89, 0x9f, 0xf9, 0xc1, 0x86, 0x91, 0x5d,
	0x5c, 0x3c, 0xfb, 0xdb, 0x38, 0x4a, 0x25, 0x49, 0x48, 0xca, 0xc4, 0x33, 0xcf, 0x63, 0xb2, 0xf5,
	0xd3, 0x70, 0xef, 0x87, 0x8c, 0xf8, 0x21, 0x4b, 0x85, 0xa7, 0xfd, 0xf8, 0x14, 0x46, 0x62, 0xb3,
	0x7f, 0x24, 0x01, 0x4f, 0x86, 0x8b, 0xb8, 0x18, 0x7b, 0xee, 0x30, 0xe4, 0xa3, 0x5d, 0x5c, 0x0c,
	0x73, 0x96, 0xf1, 0x5c, 0xb0, 0x7c, 0x18, 0xe6, 0x59, 0x50, 0x7d, 0xfa, 0xbf, 0xf5, 0xee, 0x22,
	0x2e, 0xd6, 0xd5, 0xe0, 0x59, 0x39, 0xd4, 0x93, 0xcf, 0x21, 0xe0, 0xdb, 0xc7, 0xa6, 0x7a, 0x18,
	0x5f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x54, 0xa6, 0x83, 0x21, 0x41, 0x03, 0x00, 0x00,
}
